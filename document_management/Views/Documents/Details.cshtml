@model Document

@{
    ViewData["Title"] = Model.Title;
}

<style>
    .document-viewer {
        display: flex;
        height: calc(100vh - 200px);
        position: relative;
        overflow: hidden;
    }

    .document-panel {
        flex: 1;
        display: flex;
        flex-direction: column;
        transition: all 0.3s ease;
        min-width: 0;
    }

    .info-panel {
        width: 300px;
        background: #f8f9fa;
        border-left: 1px solid #dee2e6;
        padding: 1rem;
        overflow-y: auto;
        transition: all 0.3s ease;
        position: relative;
        right: 0;
    }

    .info-panel.hidden {
        position: absolute;
        right: -300px;
        opacity: 0;
        visibility: hidden;
    }

    .document-panel.expanded {
        margin-right: 0;
        width: 100%;
    }

    .document-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        background: white;
    }

    .document-content {
        flex: 1;
        overflow: hidden;
        position: relative;
        background: white;
    }

    .document-preview {
        width: 100%;
        height: 100%;
        border: none;
    }

    .document-preview-placeholder {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        color: #6c757d;
        background: #f8f9fa;
    }

    #toggleSidebar {
        transition: transform 0.3s ease;
        z-index: 1;
    }

    #toggleSidebar.rotated {
        transform: rotate(180deg);
    }

    .info-section {
        margin-bottom: 2rem;
    }

    .info-grid {
        display: grid;
        gap: 1rem;
        margin-top: 1rem;
    }

    .info-item {
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
    }

    .info-item i {
        font-size: 1.25rem;
        color: var(--bs-primary);
    }

    .info-item div {
        display: flex;
        flex-direction: column;
    }

    .info-item small {
        color: #6c757d;
        font-size: 0.875rem;
    }

    .version-section {
        margin-top: 2rem;
    }

    .version-timeline {
        position: relative;
        padding-left: 2rem;
    }

    .version-item {
        position: relative;
        padding-bottom: 1.5rem;
    }

    .version-marker {
        position: absolute;
        left: -2rem;
        width: 1rem;
        height: 1rem;
        border-radius: 50%;
        background: #dee2e6;
        border: 2px solid white;
    }

    .version-item.current .version-marker {
        background: var(--bs-primary);
    }

    .version-content {
        background: white;
        border-radius: 0.5rem;
        padding: 1rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
</style>

<div class="document-viewer">
    <div class="document-panel" id="documentPanel">
        <div class="document-header">
            <h3 class="mb-0">@Model.Title</h3>
            <div class="document-actions">
                <div class="btn-group">
                    <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-outline-primary btn-sm">
                        <i class="bi bi-pencil me-1"></i>Edit
                    </a>
                    <a href="@Url.Action("Download", new { id = Model.Id })" class="btn btn-outline-primary btn-sm">
                        <i class="bi bi-download me-1"></i>Download
                    </a>
                    <button class="btn btn-outline-primary btn-sm" id="toggleSidebar" title="Toggle Document Information">
                        <i class="bi bi-layout-sidebar-reverse"></i>
                    </button>
                </div>
            </div>
        </div>
        <div class="document-content">
            <div id="pdfViewer" style="width:100%;height:100%;border:none;overflow:auto;position:relative;">
                <div id="loadingIndicator" style="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);text-align:center;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading document...</p>
                </div>
            </div>
        </div>
    </div>

    <div class="info-panel" id="infoPanel">
        <div class="info-section">
            <h4>Document Information</h4>
            <div class="info-grid">
                <div class="info-item">
                    <i class="bi bi-person text-primary"></i>
                    <div>
                        <small>Author</small>
                        <span>@Model.Author</span>
                    </div>
                </div>
                <div class="info-item">
                    <i class="bi bi-calendar text-primary"></i>
                    <div>
                        <small>Created</small>
                        <span>@Model.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                    </div>
                </div>
                <div class="info-item">
                    <i class="bi bi-file-earmark text-primary"></i>
                    <div>
                        <small>Type</small>
                        <span>@Model.DocumentType</span>
                    </div>
                </div>
                <div class="info-item">
                    <i class="bi bi-info-circle text-primary"></i>
                    <div>
                        <small>Status</small>
                        <span class="status-badge">@Model.Status</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="version-section">
            <h4>Version History</h4>
            <div class="version-timeline">
                @foreach (var version in Model.Versions.OrderByDescending(v => v.ModifiedAt))
                {
                    <div
                        class="version-item @(version == Model.Versions.OrderByDescending(v => v.ModifiedAt).First() ? "current" : "")">
                        <div class="version-marker"></div>
                        <div class="version-content">
                            <h6>Version @version.VersionNumber</h6>
                            <p class="version-meta">
                                <i class="bi bi-person-circle me-1"></i>@version.ModifiedBy
                                <br>
                                <i class="bi bi-clock me-1"></i>@version.ModifiedAt.ToString("MMM dd, yyyy HH:mm")
                            </p>
                            <p class="version-description">@version.ChangeDescription</p>
                            <div class="version-actions">
                                <a href="@Url.Action("DownloadVersion", new { id = version.Id })"
                                    class="btn btn-link btn-sm">
                                    <i class="bi bi-download me-1"></i>Download
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <script>
        function loadPDF() {
            if (typeof pdfjsLib === 'undefined') {
                setTimeout(loadPDF, 100);
                return;
            }
            const viewer = document.getElementById('pdfViewer');
            const loadingIndicator = document.getElementById('loadingIndicator');
            let url = '@Url.Action("PreviewPdf", new { id = Model.Id })';
            pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
            pdfjsLib.getDocument(url).promise.then(function (pdf) {
                loadingIndicator.style.display = 'none';
                const numPages = pdf.numPages;
                const pageContainer = document.createElement('div');
                pageContainer.style.padding = '20px';
                viewer.appendChild(pageContainer);
                for (let pageNum = 1; pageNum <= numPages; pageNum++) {
                    const canvas = document.createElement('canvas');
                    canvas.className = 'pdf-page';
                    pageContainer.appendChild(canvas);
                    pdf.getPage(pageNum).then(function (page) {
                        const viewport = page.getViewport({ scale: 1.5 });
                        canvas.width = viewport.width;
                        canvas.height = viewport.height;
                        const renderContext = {
                            canvasContext: canvas.getContext('2d'),
                            viewport: viewport
                        };
                        page.render(renderContext);
                    });
                }
            }).catch(function (error) {
                loadingIndicator.style.display = 'none';
                viewer.innerHTML = `<div class='alert alert-danger m-3'>
                    <h4 class='alert-heading'>Error loading document preview</h4>
                    <p>${error.message}</p>
                    <hr>
                    <p class='mb-0'>
                        <a href='@Url.Action("Download", new { id = Model.Id })' class='btn btn-primary'>
                            <i class='bi bi-download me-1'></i>Download Instead
                        </a>
                    </p>
                </div>`;
            });
        }
        document.addEventListener('DOMContentLoaded', loadPDF);
    </script>
}