@model Document

@{
    ViewData["Title"] = Model.Title;
}

<div class="document-viewer">
    <!-- Left Panel - Document Preview -->
    <div class="document-panel">
        <div class="document-header">
            <h3 class="mb-0">@Model.Title</h3>
            <div class="document-actions">
                <div class="btn-group">
                    <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-outline-primary btn-sm">
                        <i class="bi bi-pencil me-1"></i>Edit
                    </a>
                    <a href="@Url.Action("Download", new { id = Model.Id })" class="btn btn-outline-primary btn-sm">
                        <i class="bi bi-download me-1"></i>Download
                    </a>
                    <button class="btn btn-outline-primary btn-sm" id="toggleSidebar">
                        <i class="bi bi-layout-sidebar-reverse"></i>
                    </button>
                </div>
            </div>
        </div>
        <div class="document-content">
            @if (Model.DocumentType.ToLower() == "pdf" || Model.DocumentType.ToLower() == "docx")
            {
                <iframe src="@Url.Action("Preview", new { id = Model.Id })" class="document-preview" frameborder="0"
                    width="100%" height="100%" id="documentPreview" onerror="handlePreviewError()"></iframe>
            }
            else
            {
                <div class="document-preview-placeholder">
                    <i class="bi bi-file-earmark-text display-1"></i>
                    <p class="mt-3">Preview not available for this file type</p>
                </div>
            }
        </div>
    </div>

    <!-- Right Panel - Document Info & Version History -->
    <div class="info-panel" id="infoPanel">
        <div class="info-section">
            <h4>Document Information</h4>
            <div class="info-grid">
                <div class="info-item">
                    <i class="bi bi-person text-primary"></i>
                    <div>
                        <small>Author</small>
                        <span>@Model.Author</span>
                    </div>
                </div>
                <div class="info-item">
                    <i class="bi bi-calendar text-primary"></i>
                    <div>
                        <small>Created</small>
                        <span>@Model.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                    </div>
                </div>
                <div class="info-item">
                    <i class="bi bi-file-earmark text-primary"></i>
                    <div>
                        <small>Type</small>
                        <span>@Model.DocumentType</span>
                    </div>
                </div>
                <div class="info-item">
                    <i class="bi bi-info-circle text-primary"></i>
                    <div>
                        <small>Status</small>
                        <span class="status-badge">@Model.Status</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="version-section">
            <h4>Version History</h4>
            <div class="version-timeline">
                @foreach (var version in Model.Versions.OrderByDescending(v => v.ModifiedAt))
                {
                    <div
                        class="version-item @(version == Model.Versions.OrderByDescending(v => v.ModifiedAt).First() ? "current" : "")">
                        <div class="version-marker"></div>
                        <div class="version-content">
                            <h6>Version @version.VersionNumber</h6>
                            <p class="version-meta">
                                <i class="bi bi-person-circle me-1"></i>@version.ModifiedBy
                                <br>
                                <i class="bi bi-clock me-1"></i>@version.ModifiedAt.ToString("MMM dd, yyyy HH:mm")
                            </p>
                            <p class="version-description">@version.ChangeDescription</p>
                            <div class="version-actions">
                                <a href="@Url.Action("DownloadVersion", new { id = version.Id })"
                                    class="btn btn-link btn-sm">
                                    <i class="bi bi-download me-1"></i>Download
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .document-viewer {
            display: flex;
            height: calc(100vh - 60px);
            margin: -1rem;
            background: #f8f9fa;
            overflow: hidden;
            /* Prevent outer scrollbar */
        }

        .document-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
            border-right: 1px solid #dee2e6;
            overflow: hidden;
            /* Prevent panel scrollbar */
        }

        .document-header {
            padding: 1rem;
            border-bottom: 1px solid #dee2e6;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-shrink: 0;
            /* Prevent header from shrinking */
        }

        .document-content {
            flex: 1;
            position: relative;
            /* For absolute positioning of iframe */
            overflow: hidden;
            /* Hide scrollbar of content container */
            padding: 0;
            /* Remove padding to maximize space */
        }

        .document-preview {
            width: 100%;
            height: 100%;
            border: none;
            background: white;
            padding: 20px;
            overflow: auto;
        }

        .document-preview img {
            max-width: 100%;
            height: auto;
        }

        .document-preview table {
            border-collapse: collapse;
            width: 100%;
            margin: 1em 0;
        }

        .document-preview table td,
        .document-preview table th {
            border: 1px solid #ddd;
            padding: 8px;
        }

        .document-preview table tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        .document-preview h1,
        .document-preview h2,
        .document-preview h3,
        .document-preview h4,
        .document-preview h5,
        .document-preview h6 {
            margin-top: 1em;
            margin-bottom: 0.5em;
        }

        .document-preview p {
            margin-bottom: 1em;
            line-height: 1.5;
        }

        .docx-wrapper {
            width: 100%;
            height: 100%;
            overflow: auto;
            padding: 20px;
            background: white;
        }

        .docx-wrapper .page {
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .document-preview-placeholder {
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: #6c757d;
            background: #f8f9fa;
            border-radius: 0.5rem;
        }

        .info-panel {
            width: 400px;
            background: white;
            overflow-y: auto;
            transition: transform 0.3s ease;
        }

        .info-panel.collapsed {
            transform: translateX(400px);
        }

        .info-section,
        .version-section {
            padding: 1.5rem;
            border-bottom: 1px solid #dee2e6;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            margin-top: 1rem;
        }

        .info-item {
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .info-item i {
            font-size: 1.25rem;
        }

        .info-item div {
            display: flex;
            flex-direction: column;
        }

        .info-item small {
            color: #6c757d;
            font-size: 0.875rem;
        }

        .status-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            background: rgba(var(--bs-primary-rgb), 0.1);
            color: var(--bs-primary);
        }

        .version-timeline {
            position: relative;
            padding-left: 2rem;
        }

        .version-item {
            position: relative;
            padding-bottom: 1.5rem;
        }

        .version-marker {
            position: absolute;
            left: -2rem;
            width: 1rem;
            height: 1rem;
            border-radius: 50%;
            background: #dee2e6;
            border: 2px solid white;
        }

        .version-item.current .version-marker {
            background: var(--bs-primary);
        }

        .version-item::before {
            content: '';
            position: absolute;
            left: -1.6rem;
            top: 1rem;
            bottom: -0.5rem;
            width: 2px;
            background: #dee2e6;
        }

        .version-item:last-child::before {
            display: none;
        }

        .version-content {
            background: #f8f9fa;
            border-radius: 0.5rem;
            padding: 1rem;
        }

        .version-meta {
            font-size: 0.875rem;
            color: #6c757d;
            margin-bottom: 0.5rem;
        }

        .version-description {
            margin-bottom: 0.5rem;
        }

        .version-actions {
            display: flex;
            gap: 0.5rem;
        }

        @@media (max-width: 992px) {
            .info-panel {
                position: fixed;
                right: 0;
                top: 0;
                bottom: 0;
                z-index: 1000;
            }
        }

        .document-content-wrapper {
            padding: 2rem;
            max-width: 100%;
            margin: 0 auto;
            background: white;
        }

        .document-content-wrapper img {
            max-width: 100%;
            height: auto;
            margin: 1rem 0;
        }

        .document-content-wrapper table {
            width: 100%;
            margin: 1rem 0;
            border-collapse: collapse;
        }

        .document-content-wrapper table td,
        .document-content-wrapper table th {
            padding: 0.5rem;
            border: 1px solid #dee2e6;
        }

        .document-content-wrapper table tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        .document-content-wrapper h1,
        .document-content-wrapper h2,
        .document-content-wrapper h3 {
            margin-top: 1.5rem;
            margin-bottom: 1rem;
            color: #212529;
        }

        .document-content-wrapper p {
            margin-bottom: 1rem;
            line-height: 1.6;
        }

        .document-content-wrapper ul,
        .document-content-wrapper ol {
            margin-bottom: 1rem;
            padding-left: 2rem;
        }

        .document-content-wrapper li {
            margin-bottom: 0.5rem;
        }

        .document-content-wrapper blockquote {
            border-left: 4px solid #dee2e6;
            padding-left: 1rem;
            margin-left: 0;
            color: #6c757d;
        }

        /* Стили для печатной версии */
        @@media print {

            /* Базовые настройки печати */
            * {
                -webkit-print-color-adjust: exact !important;
                color-adjust: exact !important;
                print-color-adjust: exact !important;
            }

            /* Скрываем все элементы, кроме содержимого документа */
            body * {
                visibility: hidden;
            }

            .document-content-wrapper,
            .document-content-wrapper * {
                visibility: visible;
            }

            .document-content-wrapper {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
                padding: 20px;
                margin: 0;
                font-family: "Times New Roman", Times, serif;
                font-size: 12pt;
                line-height: 1.5;
                color: #000000;
                background: #ffffff !important;
            }

            /* Убираем фон и тени для печати */
            .document-content-wrapper {
                background: none !important;
                box-shadow: none !important;
            }

            /* Настраиваем отступы страницы */
            @@page {
                size: A4;
                margin: 2cm;
                marks: none;
            }

            /* Стили для текста */
            .document-content-wrapper p {
                margin: 0 0 1em 0;
                text-align: justify;
                orphans: 3;
                widows: 3;
            }

            /* Стили для заголовков */
            .document-content-wrapper h1 {
                font-size: 16pt;
                font-weight: bold;
                margin: 1.5em 0 1em 0;
                page-break-after: avoid;
            }

            .document-content-wrapper h2 {
                font-size: 14pt;
                font-weight: bold;
                margin: 1.2em 0 0.8em 0;
                page-break-after: avoid;
            }

            .document-content-wrapper h3 {
                font-size: 13pt;
                font-weight: bold;
                margin: 1em 0 0.6em 0;
                page-break-after: avoid;
            }

            /* Стили для таблиц */
            .document-content-wrapper table {
                width: 100% !important;
                margin: 1em 0;
                border-collapse: collapse !important;
                page-break-inside: avoid;
                font-size: 11pt;
            }

            .document-content-wrapper table td,
            .document-content-wrapper table th {
                border: 1px solid #000000 !important;
                padding: 0.3em 0.5em;
                vertical-align: top;
            }

            .document-content-wrapper table th {
                background-color: #f8f9fa !important;
                font-weight: bold;
            }

            /* Стили для списков */
            .document-content-wrapper ul,
            .document-content-wrapper ol {
                margin: 1em 0;
                padding-left: 2em;
            }

            .document-content-wrapper li {
                margin: 0.3em 0;
            }

            /* Стили для изображений */
            .document-content-wrapper img {
                max-width: 100% !important;
                height: auto !important;
                page-break-inside: avoid;
                display: block;
                margin: 1em auto;
            }

            /* Стили для ссылок */
            .document-content-wrapper a {
                color: #000000 !important;
                text-decoration: underline !important;
            }

            .document-content-wrapper a[href]:after {
                content: " (" attr(href) ")";
                font-size: 90%;
                color: #666666;
            }

            /* Стили для метаданных документа */
            .document-metadata {
                text-align: center;
                margin-bottom: 2em;
                border-bottom: 1px solid #000000;
                padding-bottom: 1em;
            }

            .document-metadata h1 {
                font-size: 16pt;
                margin: 0 0 0.5em 0;
            }

            .document-metadata p {
                font-size: 11pt;
                color: #666666;
                margin: 0;
            }

            /* Нумерация страниц */
            .document-content-wrapper {
                counter-reset: page;
            }

            .document-content-wrapper::after {
                content: counter(page);
                counter-increment: page;
                position: running(footer);
                text-align: center;
                font-size: 10pt;
                color: #666666;
            }

            @@page {
                @@bottom-center {
                    content: element(footer);
                }
            }

            /* Предотвращаем разрывы в неподходящих местах */
            .document-content-wrapper p,
            .document-content-wrapper h1,
            .document-content-wrapper h2,
            .document-content-wrapper h3,
            .document-content-wrapper h4,
            .document-content-wrapper h5,
            .document-content-wrapper h6,
            .document-content-wrapper table,
            .document-content-wrapper img {
                page-break-inside: avoid;
            }

            .document-content-wrapper h1,
            .document-content-wrapper h2,
            .document-content-wrapper h3,
            .document-content-wrapper h4,
            .document-content-wrapper h5,
            .document-content-wrapper h6 {
                page-break-after: avoid;
            }

            /* Улучшаем читаемость текста */
            .document-content-wrapper {
                text-rendering: optimizeLegibility;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }
        }

        /* Стили для кнопки печати */
        .print-button {
            position: relative;
        }

        .print-button .print-tooltip {
            visibility: hidden;
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: white;
            text-align: center;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            margin-bottom: 5px;
            z-index: 1;
        }

        .print-button:hover .print-tooltip {
            visibility: visible;
        }
    </style>
    <!-- Используем более новую версию библиотеки -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/docx-preview@0.1.30/dist/docx-preview.css">
}

@section Scripts {
    <!-- Используем mammoth.js для конвертации DOCX в HTML -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.6.0/mammoth.browser.min.js"></script>
    <script>
        // Функция для логирования с временными метками и фильтрацией
        function logWithTimestamp(message, data = null, level = 'info') {
            // Игнорируем сообщения от сторонних скриптов
            if (message.includes('dlnk.one') ||
                message.includes('content.js') ||
                message.includes('Listener init error')) {
                return;
            }

            const timestamp = new Date().toISOString();
            const logMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`;

            // Используем разные методы консоли в зависимости от уровня
            switch (level) {
                case 'error':
                    console.error(logMessage, data || '');
                    break;
                case 'warn':
                    console.warn(logMessage, data || '');
                    break;
                case 'debug':
                    if (process.env.NODE_ENV === 'development') {
                        console.debug(logMessage, data || '');
                    }
                    break;
                default:
                    console.log(logMessage, data || '');
            }
        }

        // Класс для работы с кэшем документов
        class DocumentCache {
            constructor() {
                logWithTimestamp('Initializing DocumentCache');
                this.dbName = 'DocumentPreviewCache';
                this.storeName = 'documents';
                this.db = null;
            }

            async init() {
                logWithTimestamp('Starting DocumentCache initialization');
                return new Promise((resolve, reject) => {
                    const request = indexedDB.open(this.dbName, 1);

                    request.onerror = (event) => {
                        logWithTimestamp('IndexedDB open error', {
                            error: event.target.error,
                            errorCode: event.target.error?.code
                        });
                        reject(request.error);
                    };

                    request.onsuccess = (event) => {
                        logWithTimestamp('IndexedDB opened successfully', {
                            dbName: this.dbName,
                            storeName: this.storeName
                        });
                        this.db = request.result;
                        resolve();
                    };

                    request.onupgradeneeded = (event) => {
                        logWithTimestamp('IndexedDB upgrade needed');
                        const db = event.target.result;
                        if (!db.objectStoreNames.contains(this.storeName)) {
                            logWithTimestamp('Creating object store');
                            db.createObjectStore(this.storeName, { keyPath: 'id' });
                        }
                    };
                });
            }

            async getDocument(id) {
                return new Promise((resolve, reject) => {
                    const transaction = this.db.transaction(this.storeName, 'readonly');
                    const store = transaction.objectStore(this.storeName);
                    const request = store.get(id);

                    request.onerror = () => reject(request.error);
                    request.onsuccess = () => resolve(request.result?.data);
                });
            }

            async saveDocument(id, data) {
                return new Promise((resolve, reject) => {
                    const transaction = this.db.transaction(this.storeName, 'readwrite');
                    const store = transaction.objectStore(this.storeName);
                    const request = store.put({ id, data, timestamp: Date.now() });

                    request.onerror = () => reject(request.error);
                    request.onsuccess = () => resolve();
                });
            }

            async deleteDocument(id) {
                return new Promise((resolve, reject) => {
                    const transaction = this.db.transaction(this.storeName, 'readwrite');
                    const store = transaction.objectStore(this.storeName);
                    const request = store.delete(id);

                    request.onerror = () => reject(request.error);
                    request.onsuccess = () => resolve();
                });
            }

            async clearCache() {
                return new Promise((resolve, reject) => {
                    const transaction = this.db.transaction(this.storeName, 'readwrite');
                    const store = transaction.objectStore(this.storeName);
                    const request = store.clear();

                    request.onerror = () => reject(request.error);
                    request.onsuccess = () => resolve();
                });
            }
        }

        // Инициализация кэша
        const documentCache = new DocumentCache();
        let isDocumentLoaded = false;

        function formatConversionMessage(message) {
            // Игнорируем некоторые технические предупреждения, которые не важны для пользователя
            const ignoredWarnings = [
                'w:smartTagPr',
                'w:smartTag',
                'w:commentReference',
                'w:commentRangeStart',
                'w:commentRangeEnd'
            ];

            if (ignoredWarnings.some(warning => message.includes(warning))) {
                return null; // Не показываем эти предупреждения пользователю
            }

            // Форматируем сообщение для пользователя
            if (message.includes('unrecognised element')) {
                return 'Некоторые элементы форматирования Word не поддерживаются в предпросмотре';
            }
            if (message.includes('image')) {
                return 'Некоторые изображения могут отображаться некорректно';
            }
            if (message.includes('style')) {
                return 'Некоторые стили форматирования могут отображаться иначе';
            }

            return message;
        }

        function showConversionMessages(messages) {
            if (!messages || messages.length === 0) return;

            // Фильтруем и форматируем сообщения
            const formattedMessages = messages
                .map(msg => formatConversionMessage(msg.message))
                .filter(msg => msg !== null);

            if (formattedMessages.length === 0) return;

            const messageContainer = document.createElement('div');
            messageContainer.className = 'alert alert-info alert-dismissible fade show mt-3';
            messageContainer.style.position = 'fixed';
            messageContainer.style.bottom = '20px';
            messageContainer.style.right = '20px';
            messageContainer.style.zIndex = '1000';
            messageContainer.style.maxWidth = '400px';
            messageContainer.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';

            const messageList = formattedMessages.map(msg =>
                `<div class="small mb-1"><i class="bi bi-info-circle me-1"></i>${msg}</div>`
            ).join('');

            messageContainer.innerHTML = `
                                                                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                                                            <div class="d-flex align-items-center mb-2">
                                                                                <i class="bi bi-info-circle-fill me-2"></i>
                                                                                <strong>Информация о предпросмотре</strong>
                                                                            </div>
                                                                            ${messageList}
                                                                            <div class="mt-2 small text-muted">
                                                                                <i class="bi bi-lightbulb me-1"></i>
                                                                                Для полного форматирования скачайте документ
                                                                            </div>
                                                                        `;

            document.body.appendChild(messageContainer);

            // Автоматически скрываем через 15 секунд
            setTimeout(() => {
                const alert = bootstrap.Alert.getOrCreateInstance(messageContainer);
                alert.close();
            }, 15000);
        }

        document.addEventListener('DOMContentLoaded', async function () {
            const toggleBtn = document.getElementById('toggleSidebar');
            const infoPanel = document.getElementById('infoPanel');
            const documentPreview = document.getElementById('documentPreview');
            const documentContent = document.querySelector('.document-content');
            const documentId = '@Model.Id';
            const documentType = '@Model.DocumentType.ToLower()';

            logWithTimestamp('DOM Content Loaded event fired');
            logWithTimestamp('Document details', {
                id: documentId,
                type: documentType,
                hasPreview: !!documentPreview,
                hasContent: !!documentContent
            });

            try {
                // Инициализируем кэш
                logWithTimestamp('Starting cache initialization');
                await documentCache.init();
                logWithTimestamp('Cache initialized successfully');

                // Обработчик ухода со страницы
                window.addEventListener('beforeunload', async () => {
                    if (isDocumentLoaded) {
                        await documentCache.deleteDocument(documentId);
                        logWithTimestamp('Document removed from cache');
                    }
                });

                if (documentType === 'docx') {
                    logWithTimestamp('Starting DOCX document processing');
                    const wrapper = document.createElement('div');
                    wrapper.className = 'document-preview';
                    documentPreview.parentNode.replaceChild(wrapper, documentPreview);

                    // Показываем индикатор загрузки
                    wrapper.innerHTML = `
                                                                                                    <div class="document-preview-placeholder">
                                                                                                        <div class="spinner-border text-primary" role="status">
                                                                                                            <span class="visually-hidden">Loading...</span>
                                                                                                        </div>
                                                                                                        <p class="mt-3">Загрузка документа...</p>
                                                                                                    </div>
                                                                                                `;
                    logWithTimestamp('Added loading indicator');

                    try {
                        // Пробуем получить документ из кэша
                        logWithTimestamp('Attempting to get document from cache');
                        let documentData = await documentCache.getDocument(documentId);

                        if (!documentData) {
                            logWithTimestamp('Document not found in cache, downloading from server');
                            const response = await fetch('@Url.Action("Download", new { id = Model.Id })', {
                                method: 'GET',
                                headers: {
                                    'Accept': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                                }
                            });

                            logWithTimestamp('Download response received', {
                                status: response.status,
                                statusText: response.statusText,
                                headers: Object.fromEntries(response.headers.entries())
                            });

                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }

                            documentData = await response.arrayBuffer();
                            logWithTimestamp('Document downloaded', {
                                size: documentData.byteLength,
                                type: documentData.constructor.name
                            });

                            // Сохраняем в кэш
                            await documentCache.saveDocument(documentId, documentData);
                            logWithTimestamp('Document saved to cache');
                        } else {
                            logWithTimestamp('Document loaded from cache', {
                                size: documentData.byteLength,
                                type: documentData.constructor.name
                            });
                        }

                        if (documentData.byteLength === 0) {
                            throw new Error('Document is empty');
                        }

                        // Проверяем, что библиотека mammoth доступна
                        if (typeof mammoth === 'undefined') {
                            throw new Error('Document viewer library is not properly loaded');
                        }

                        // Конвертируем DOCX в HTML с улучшенными опциями
                        logWithTimestamp('Starting document conversion');
                        const result = await mammoth.convertToHtml({
                            arrayBuffer: documentData,
                            options: {
                                styleMap: [
                                    "p[style-name='Heading 1'] => h1:fresh",
                                    "p[style-name='Heading 2'] => h2:fresh",
                                    "p[style-name='Heading 3'] => h3:fresh",
                                    "p[style-name='Normal'] => p:fresh",
                                    "r[style-name='Strong'] => strong",
                                    "r[style-name='Emphasis'] => em",
                                    "r[style-name='Underline'] => u",
                                    "r[style-name='Strike'] => s",
                                    "table => table.table.table-bordered",
                                    "tr => tr",
                                    "td => td",
                                    "th => th"
                                ],
                                transformDocument: (element) => {
                                    // Добавляем классы Bootstrap для таблиц
                                    if (element.type === 'table') {
                                        element.className = 'table table-bordered';
                                    }
                                    return element;
                                }
                            }
                        });

                        logWithTimestamp('Document converted successfully', {
                            hasContent: !!result.value,
                            messages: result.messages
                        });

                        // Отображаем результат с дополнительными стилями
                        const content = `
                                                                                        <div class="document-content-wrapper">
                                                                                            ${result.value}
                                                                                        </div>
                                                                                    `;
                        wrapper.innerHTML = content;
                        logWithTimestamp('Document rendered successfully');
                        isDocumentLoaded = true;

                        // Показываем сообщения о конвертации, если они есть
                        if (result.messages && result.messages.length > 0) {
                            logWithTimestamp('Conversion completed with messages', {
                                messageCount: result.messages.length,
                                messages: result.messages.map(m => m.message)
                            }, 'warn');
                            showConversionMessages(result.messages);
                        }

                        // Сохраняем метаданные документа для печати
                        if (wrapper) {
                            wrapper.dataset.author = '@Model.Author';
                            wrapper.dataset.createdAt = '@Model.CreatedAt.ToString("dd.MM.yyyy")';
                        }

                    } catch (error) {
                        logWithTimestamp('Error processing document', {
                            error: error.message,
                            stack: error.stack
                        }, 'error');
                        handlePreviewError(error.message || 'Failed to process document');
                    }
                } else if (documentType === 'pdf') {
                    // Для PDF используем стандартный просмотр
                    documentPreview.addEventListener('load', function () {
                        console.log('PDF loaded successfully');
                        isDocumentLoaded = true;
                    });
                    documentPreview.addEventListener('error', function (error) {
                        console.error('PDF load error:', error);
                        handlePreviewError('Failed to load PDF document');
                    });
                }

                toggleBtn.addEventListener('click', function () {
                    infoPanel.classList.toggle('collapsed');
                    toggleBtn.querySelector('i').classList.toggle('bi-layout-sidebar');
                    toggleBtn.querySelector('i').classList.toggle('bi-layout-sidebar-reverse');
                });

                // Добавляем кнопку печати в панель действий
                const documentActions = document.querySelector('.document-actions .btn-group');
                if (documentActions) {
                    const printButton = document.createElement('button');
                    printButton.className = 'btn btn-outline-primary btn-sm print-button';
                    printButton.innerHTML = `
                                                                    <i class="bi bi-printer me-1"></i>Печать
                                                                    <span class="print-tooltip">Печать документа</span>
                                                                `;
                    printButton.onclick = function (e) {
                        e.preventDefault();
                        prepareDocumentForPrint();
                    };
                    documentActions.appendChild(printButton);
                    logWithTimestamp('Print button added', null, 'info');
                }
            } catch (error) {
                logWithTimestamp('Initialization error', {
                    error: error.message,
                    stack: error.stack
                }, 'error');
                handlePreviewError(error.message || 'Failed to initialize document viewer');
            }
        });

        function handlePreviewError(errorMessage = '') {
            const container = document.querySelector('.document-content');
            if (container) {
                container.innerHTML = `
                                                                                                                <div class="document-preview-placeholder">
                                                                                                                    <i class="bi bi-exclamation-triangle display-1 text-warning"></i>
                                                                                                                    <p class="mt-3">Не удалось загрузить предпросмотр документа</p>
                                                                                                                    ${errorMessage ? `<p class="text-danger small">${errorMessage}</p>` : ''}
                                                                                                                    <div class="mt-3">
                                                                                                                        <a href="@Url.Action("Download", new { id = Model.Id })" class="btn btn-outline-primary me-2">
                                                                                                                            <i class="bi bi-download me-1"></i>Скачать документ
                                                                                                                        </a>
                                                                                                                        <button onclick="window.location.reload()" class="btn btn-outline-secondary">
                                                                                                                            <i class="bi bi-arrow-clockwise me-1"></i>Повторить
                                                                                                                        </button>
                                                                                                                    </div>
                                                                                                                </div>
                                                                                                            `;
            }
        }

        // Функция для подготовки документа к печати
        function prepareDocumentForPrint() {
            logWithTimestamp('Preparing document for print', null, 'info');

            const currentContent = document.querySelector('.document-content-wrapper');
            if (currentContent) {
                // Клонируем содержимое для предотвращения проблем с форматированием
                const contentClone = currentContent.cloneNode(true);
                logWithTimestamp('Document content cloned', null, 'info');

                // Очищаем все inline-стили, которые могут мешать печати
                const elementsWithStyles = contentClone.querySelectorAll('[style]');
                elementsWithStyles.forEach(el => el.removeAttribute('style'));
                logWithTimestamp('Inline styles removed from cloned content', null, 'info');

                // Добавляем метаданные документа
                const metadata = document.createElement('div');
                metadata.className = 'document-metadata';
                metadata.innerHTML = `
                                    <h1>${document.title}</h1>
                                    <p>
                                        Автор: ${currentContent.dataset.author || 'Не указан'}<br>
                                        Дата создания: ${currentContent.dataset.createdAt || new Date().toLocaleDateString()}<br>
                                        Дата печати: ${new Date().toLocaleDateString()}
                                    </p>
                                `;
                logWithTimestamp('Metadata prepared for print', null, 'info');

                // Стили для печати (скопированы из @@media print)
                const printStyles = `
                                    <style>
                                    * {
                                        -webkit-print-color-adjust: exact !important;
                                        color-adjust: exact !important;
                                        print-color-adjust: exact !important;
                                    }
                                    body {
                                        margin: 0;
                                        padding: 0;
                                        background: #fff !important;
                                    }
                                    .document-content-wrapper {
                                        font-family: "Times New Roman", Times, serif;
                                        font-size: 12pt;
                                        line-height: 1.5;
                                        color: #000000;
                                        background: #ffffff !important;
                                        padding: 20px;
                                        margin: 0;
                                        text-rendering: optimizeLegibility;
                                        -webkit-font-smoothing: antialiased;
                                        -moz-osx-font-smoothing: grayscale;
                                    }
                                    .document-content-wrapper p {
                                        margin: 0 0 1em 0;
                                        text-align: justify;
                                        orphans: 3;
                                        widows: 3;
                                    }
                                    .document-content-wrapper h1 {
                                        font-size: 16pt;
                                        font-weight: bold;
                                        margin: 1.5em 0 1em 0;
                                        page-break-after: avoid;
                                    }
                                    .document-content-wrapper h2 {
                                        font-size: 14pt;
                                        font-weight: bold;
                                        margin: 1.2em 0 0.8em 0;
                                        page-break-after: avoid;
                                    }
                                    .document-content-wrapper h3 {
                                        font-size: 13pt;
                                        font-weight: bold;
                                        margin: 1em 0 0.6em 0;
                                        page-break-after: avoid;
                                    }
                                    .document-content-wrapper table {
                                        width: 100% !important;
                                        margin: 1em 0;
                                        border-collapse: collapse !important;
                                        page-break-inside: avoid;
                                        font-size: 11pt;
                                    }
                                    .document-content-wrapper table td,
                                    .document-content-wrapper table th {
                                        border: 1px solid #000000 !important;
                                        padding: 0.3em 0.5em;
                                        vertical-align: top;
                                    }
                                    .document-content-wrapper table th {
                                        background-color: #f8f9fa !important;
                                        font-weight: bold;
                                    }
                                    .document-content-wrapper ul,
                                    .document-content-wrapper ol {
                                        margin: 1em 0;
                                        padding-left: 2em;
                                    }
                                    .document-content-wrapper li {
                                        margin: 0.3em 0;
                                    }
                                    .document-content-wrapper img {
                                        max-width: 100% !important;
                                        height: auto !important;
                                        page-break-inside: avoid;
                                        display: block;
                                        margin: 1em auto;
                                    }
                                    .document-content-wrapper a {
                                        color: #000000 !important;
                                        text-decoration: underline !important;
                                    }
                                    .document-content-wrapper a[href]:after {
                                        content: " (" attr(href) ")";
                                        font-size: 90%;
                                        color: #666666;
                                    }
                                    .document-metadata {
                                        text-align: center;
                                        margin-bottom: 2em;
                                        border-bottom: 1px solid #000000;
                                        padding-bottom: 1em;
                                    }
                                    .document-metadata h1 {
                                        font-size: 16pt;
                                        margin: 0 0 0.5em 0;
                                    }
                                    .document-metadata p {
                                        font-size: 11pt;
                                        color: #666666;
                                        margin: 0;
                                    }
                                    .document-content-wrapper p,
                                    .document-content-wrapper h1,
                                    .document-content-wrapper h2,
                                    .document-content-wrapper h3,
                                    .document-content-wrapper h4,
                                    .document-content-wrapper h5,
                                    .document-content-wrapper h6,
                                    .document-content-wrapper table,
                                    .document-content-wrapper img {
                                        page-break-inside: avoid;
                                    }
                                    .document-content-wrapper h1,
                                    .document-content-wrapper h2,
                                    .document-content-wrapper h3,
                                    .document-content-wrapper h4,
                                    .document-content-wrapper h5,
                                    .document-content-wrapper h6 {
                                        page-break-after: avoid;
                                    }
                                    </style>
                                `;

                logWithTimestamp('Attempting to open print window', null, 'info');
                // Открываем новое окно для печати
                const printWindow = window.open('', '_blank');
                if (!printWindow) {
                    logWithTimestamp('Failed to open print window. It may be blocked by a popup blocker.', null, 'error');
                    alert('Не удалось открыть окно для печати. Возможно, оно заблокировано браузером. Разрешите всплывающие окна для этого сайта.');
                    return;
                }
                logWithTimestamp('Print window opened successfully', null, 'info');
                printWindow.document.write(`
                                    <html>
                                    <head>
                                        <title>${document.title}</title>
                                        ${printStyles}
                                    </head>
                                    <body>
                                        ${metadata.outerHTML}
                                        ${contentClone.outerHTML}
                                    </body>
                                    </html>
                                `);
                printWindow.document.close();
                logWithTimestamp('Print content written to print window', null, 'info');

                // Ждём загрузки и печатаем
                printWindow.onload = function () {
                    logWithTimestamp('Print window loaded, starting print', null, 'info');
                    printWindow.focus();
                    setTimeout(() => {
                        printWindow.print();
                        logWithTimestamp('Print dialog opened', null, 'info');
                        // printWindow.close(); // Не закрываем окно автоматически!
                    }, 300);
                };
            } else {
                logWithTimestamp('Document content not found for printing', null, 'error');
                handlePreviewError('Не удалось подготовить документ к печати');
            }
        }
    </script>
}